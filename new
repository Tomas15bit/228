// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract GitHubDonation {
    address public owner;

    // Маппинг для хранения адресов разработчиков
    mapping(string => address) public developerAddresses;

    // Событие для отслеживания пожертвований
    event DonationReceived(address indexed donor, string indexed developer, uint256 amount);

    constructor() {
        owner = msg.sender;
    }

    // Функция для регистрации разработчика
    function registerDeveloper(string memory githubUsername, address developerAddress) public {
        require(msg.sender == owner, "Only owner can register developers");
        developerAddresses[githubUsername] = developerAddress;
    }

    // Функция для отправки пожертвования
    function donate(string memory githubUsername) public payable {
        address developerAddress = developerAddresses[githubUsername];
        require(developerAddress != address(0), "Developer not registered");
        require(msg.value > 0, "Donation amount must be greater than zero");

        // Перевод средств разработчику
        payable(developerAddress).transfer(msg.value);

        emit DonationReceived(msg.sender, githubUsername, msg.value);
    }

    // Функция для снятия остаточных средств (только для владельца)
    function withdraw() public {
        require(msg.sender == owner, "Only owner can withdraw");
        payable(owner).transfer(address(this).balance);
    }
}
